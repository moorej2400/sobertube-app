# Nginx Configuration for SoberTube Cloud-Agnostic Architecture
# Supports self-hosted Supabase services with proper routing and load balancing

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    # Basic settings
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 100;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml;

    # Log format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    # Upstream definitions for Supabase services
    upstream postgrest {
        server rest:3000;
        keepalive 32;
    }
    
    upstream realtime {
        server realtime:4000;
        keepalive 16;
    }
    
    upstream gotrue {
        server auth:9999;
        keepalive 16;
    }
    
    upstream storage {
        server storage:5000;
        keepalive 16;
    }
    
    upstream edge_functions {
        server edge-functions:9000;
        keepalive 8;
    }

    # HTTPS API Gateway Server (Port 8000)
    server {
        listen 8000 ssl http2;
        server_name api.sobertube.local localhost;
        
        # SSL certificate configuration
        ssl_certificate /etc/nginx/ssl/server.crt;
        ssl_private_key /etc/nginx/ssl/server.key;
        
        # Include SSL configuration
        include /etc/nginx/conf.d/ssl.conf;
        
        access_log /var/log/nginx/api_access.log main;
        error_log /var/log/nginx/api_error.log warn;

        # CORS headers for development
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS, PATCH' always;
        add_header 'Access-Control-Allow-Headers' 'Accept, Authorization, Cache-Control, Content-Type, DNT, If-Modified-Since, Keep-Alive, Origin, User-Agent, X-Requested-With, apikey, x-client-info' always;
        add_header 'Access-Control-Expose-Headers' 'Authorization' always;

        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS, PATCH';
            add_header 'Access-Control-Allow-Headers' 'Accept, Authorization, Cache-Control, Content-Type, DNT, If-Modified-Since, Keep-Alive, Origin, User-Agent, X-Requested-With, apikey, x-client-info';
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }

        # PostgREST API (Database API)
        location /rest/v1/ {
            proxy_pass http://postgrest/;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_buffering off;
        }

        # GoTrue Authentication
        location /auth/v1/ {
            proxy_pass http://gotrue/;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_buffering off;
        }

        # Realtime WebSocket connections
        location /realtime/v1/ {
            proxy_pass http://realtime/socket/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 86400;
            proxy_send_timeout 86400;
        }

        # Storage API
        location /storage/v1/ {
            proxy_pass http://storage/;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Handle large file uploads
            client_max_body_size 50M;
            proxy_request_buffering off;
            proxy_buffering off;
        }

        # Edge Functions
        location /functions/v1/ {
            proxy_pass http://edge_functions/;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 300;
            proxy_connect_timeout 10;
            proxy_send_timeout 300;
        }

        # API Gateway health check
        location /health {
            access_log off;
            return 200 "Supabase API Gateway healthy (HTTPS)\n";
            add_header Content-Type text/plain;
        }
    }

    # HTTP API Gateway Server (Port 8080) - For development flexibility
    server {
        listen 8080;
        server_name api.sobertube.local localhost;
        
        access_log /var/log/nginx/api_http_access.log main;
        error_log /var/log/nginx/api_http_error.log warn;

        # CORS headers for development
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS, PATCH' always;
        add_header 'Access-Control-Allow-Headers' 'Accept, Authorization, Cache-Control, Content-Type, DNT, If-Modified-Since, Keep-Alive, Origin, User-Agent, X-Requested-With, apikey, x-client-info' always;
        add_header 'Access-Control-Expose-Headers' 'Authorization' always;

        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS, PATCH';
            add_header 'Access-Control-Allow-Headers' 'Accept, Authorization, Cache-Control, Content-Type, DNT, If-Modified-Since, Keep-Alive, Origin, User-Agent, X-Requested-With, apikey, x-client-info';
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }

        # PostgREST API (Database API)
        location /rest/v1/ {
            proxy_pass http://postgrest/;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_buffering off;
        }

        # GoTrue Authentication
        location /auth/v1/ {
            proxy_pass http://gotrue/;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_buffering off;
        }

        # Realtime WebSocket connections
        location /realtime/v1/ {
            proxy_pass http://realtime/socket/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 86400;
            proxy_send_timeout 86400;
        }

        # Storage API
        location /storage/v1/ {
            proxy_pass http://storage/;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Handle large file uploads
            client_max_body_size 50M;
            proxy_request_buffering off;
            proxy_buffering off;
        }

        # Edge Functions
        location /functions/v1/ {
            proxy_pass http://edge_functions/;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 300;
            proxy_connect_timeout 10;
            proxy_send_timeout 300;
        }

        # API Gateway health check
        location /health {
            access_log off;
            return 200 "Supabase API Gateway healthy (HTTP)\n";
            add_header Content-Type text/plain;
        }
    }

    # HTTP Frontend Server (Port 80) - Redirect to HTTPS
    server {
        listen 80;
        server_name sobertube.local localhost;
        
        # Redirect all HTTP to HTTPS
        return 301 https://$server_name$request_uri;
    }
    
    # HTTPS Frontend Server (Port 443)
    server {
        listen 443 ssl http2;
        server_name sobertube.local localhost;
        
        # SSL certificate configuration
        ssl_certificate /etc/nginx/ssl/server.crt;
        ssl_private_key /etc/nginx/ssl/server.key;
        
        # Include SSL configuration
        include /etc/nginx/conf.d/ssl.conf;
        
        access_log /var/log/nginx/frontend_access.log main;
        error_log /var/log/nginx/frontend_error.log warn;

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "Frontend proxy healthy\n";
            add_header Content-Type text/plain;
        }

        # Proxy to SoberTube application when running
        location / {
            # Return simple status page for now
            return 200 "SoberTube Cloud-Agnostic Architecture Ready\nSupabase services available at http://localhost:8000\n";
            add_header Content-Type text/plain;
        }
    }
}